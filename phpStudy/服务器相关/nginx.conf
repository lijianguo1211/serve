#运行用户，默认是nginx
user  nginx;
#nginx进程，一般设置和cup核数一样
worker_processes  auto;

#进程pid存放位置
pid        /var/run/nginx.pid;
#最大文件打开数(连接)，可设置为系统优化后的ulimit -HSn的结果
worker_rlimit_nofile 51200;

#工作模式及连接数上限
events {
use epoll;
#epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
worker_connections 51200;
#单个后台worker process进程的最大并发链接数
multi_accept on;
}

http {
#文件扩展名与类型映射表
    include       /etc/nginx/mime.types;
#默认文件类型
    default_type  application/octet-stream;
    charset UTF-8;
#隐藏响应header和错误通知中的版本号
    server_tokens off;
#开启高效传输模式
    sendfile        on;
#激活tcp_nopush参数可以允许把httpresponse header和文件的开始放在一个文件里发布，积极的作用是减少网络报文段的数量
    tcp_nopush     on;
#激活tcp_nodelay，内核会等待将更多的字节组成一个数据包，从而提高I/O性能
    tcp_nodelay on;
#错误日志存放位置
    error_log /var/log/nginx/error.log crit;
#连接超时时间，单位是秒
    keepalive_timeout 120s;
    client_header_timeout 120s;
    client_body_timeout 120s;  
    reset_timedout_connection on; 
    send_timeout 10; 
    limit_conn_zone $binary_remote_addr zone=addr:5m; 
    limit_conn addr 100;

#设定请求缓存
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 0;

#FastCGI相关参数：为了改善网站性能：减少资源占用，提高访问速度
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 256k;

#开启gzip压缩功能
    gzip on;
    gzip_disable   "MSIE [1-6]\.";
#设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，表示不管页面多大都进行压缩。建议设置成大于1K。如果小于1K可能会越压越大。
    gzip_min_length  1k;
#压缩缓冲区大小。表示申请4个单位为16K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果
    gzip_buffers     4 16k;
#压缩版本（默认1.1，前端为squid2.5时使用1.0）用于设置识别HTTP协议版本，默认是1.1，目前大部分浏览器已经支持GZIP解压，使用默认即可。
    gzip_http_version 1.1;
#压缩比率。用来指定GZIP压缩比，1压缩比最小，处理速度最快；9压缩比最大，传输速度快，但处理最慢，也比较消耗cpu资源。
    gzip_comp_level 4;
#用来指定压缩的类型，“text/html”类型总是会被压缩
    gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss;
#vary header支持。该选项可以让前端的缓存服务器缓存经过GZIP压缩的页面，例如用 Squid缓存经过Nginx压缩的数据。
    gzip_vary on;
    gzip_proxied   expired no-cache no-store private auth;
        
###################### Vhost ################################
    include /etc/nginx/conf.d/*.conf;
}
